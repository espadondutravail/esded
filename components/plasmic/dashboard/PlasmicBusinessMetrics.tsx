// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p813zMkDftvWK6P1GMVxsb
// Component: dHn7-OQqbdeu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: iHN02Z7Ce-m0/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import Statistic from "../../Statistic"; // plasmic-import: qpvwlkqzYTfT/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsg5QdYjpsG2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: g5qd_yjps_G2/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: p813zMkDftvWK6P1GMVxsb/projectcss
import sty from "./PlasmicBusinessMetrics.module.css"; // plasmic-import: dHn7-OQqbdeu/css

createPlasmicElementProxy;

export type PlasmicBusinessMetrics__VariantMembers = {};
export type PlasmicBusinessMetrics__VariantsArgs = {};
type VariantPropType = keyof PlasmicBusinessMetrics__VariantsArgs;
export const PlasmicBusinessMetrics__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBusinessMetrics__ArgsType = {};
type ArgPropType = keyof PlasmicBusinessMetrics__ArgsType;
export const PlasmicBusinessMetrics__ArgProps = new Array<ArgPropType>();

export type PlasmicBusinessMetrics__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  h1?: Flex__<"h1">;
  start?: Flex__<typeof AntdDatePicker>;
  end?: Flex__<typeof AntdDatePicker>;
  select?: Flex__<typeof AntdSelect>;
};

export interface DefaultBusinessMetricsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBusinessMetrics__RenderFunc(props: {
  variants: PlasmicBusinessMetrics__VariantsArgs;
  args: PlasmicBusinessMetrics__ArgsType;
  overrides: PlasmicBusinessMetrics__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "start.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "end.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "month"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    topRevByCountryInDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "5h6zaT82WL1WhJ29jkzSY3",
        opId: "54009093-1658-4d28-b398-f7e187470b18",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.54009093-1658-4d28-b398-f7e187470b18.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    ordersByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "5h6zaT82WL1WhJ29jkzSY3",
        opId: "6c86387b-5294-4da6-8633-8428c471a8b5",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.6c86387b-5294-4da6-8633-8428c471a8b5.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    signupsByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "5h6zaT82WL1WhJ29jkzSY3",
        opId: "3eef0eb4-1df3-41ea-b68f-662a7c648c5a",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.3eef0eb4-1df3-41ea-b68f-662a7c648c5a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalRevByCustomDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "5h6zaT82WL1WhJ29jkzSY3",
        opId: "5e0bdf9e-8836-41c9-81f8-676407b7d20c",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.5e0bdf9e-8836-41c9-81f8-676407b7d20c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    monthlyRevByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "5h6zaT82WL1WhJ29jkzSY3",
        opId: "dc6f5c69-b0d0-46dc-aced-72d13c2bf125",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.dc6f5c69-b0d0-46dc-aced-72d13c2bf125.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    quarterlyRevByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "5h6zaT82WL1WhJ29jkzSY3",
        opId: "ae8075e0-987a-4b07-8e98-37376bbe7ee8",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.ae8075e0-987a-4b07-8e98-37376bbe7ee8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsg5QdYjpsG2()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <section
                    className={classNames(projectcss.all, sty.section__zf2Ou)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__n89V)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Business Metrics"}
                      </h1>
                    </div>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__aA3YO)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__atpFk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7Fpi4
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__pWxV
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 500 }}
                            >
                              {"Custom date range analysis"}
                            </span>
                          </React.Fragment>
                        </h2>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vIfH
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            allowClear: true,
                            bordered: true,
                            className: classNames("__wab_instance", sty.start),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["start", "value"],
                                AntdDatePicker_Helpers
                              ),
                            picker: "date",
                            popupBodyClassName: classNames({
                              [sty["pcls_hN4a1ibe_pyd"]]: true
                            }),
                            popupClassName: classNames({
                              [sty["pcls_OebIIA0_yWaY"]]: true
                            }),
                            popupHeaderClassName: classNames({
                              [sty["pcls_4LPx7qUSMwy7"]]: true
                            }),
                            popupScopeClassName: sty["start__datePickerPopup"],
                            showTime: false,
                            value: generateStateValueProp($state, [
                              "start",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "start.value"
                              }
                            ],
                            [],
                            AntdDatePicker_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdDatePicker
                              data-plasmic-name={"start"}
                              data-plasmic-override={overrides.start}
                              {...child$Props}
                            />
                          );
                        })()}
                        {(() => {
                          const child$Props = {
                            allowClear: true,
                            bordered: true,
                            className: classNames("__wab_instance", sty.end),
                            defaultValue: ``,
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["end", "value"],
                                AntdDatePicker_Helpers
                              ),
                            picker: "date",
                            popupScopeClassName: sty["end__datePickerPopup"],
                            value: generateStateValueProp($state, [
                              "end",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "end.value"
                              }
                            ],
                            [],
                            AntdDatePicker_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdDatePicker
                              data-plasmic-name={"end"}
                              data-plasmic-override={overrides.end}
                              {...child$Props}
                            />
                          );
                        })()}
                      </Stack__>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uHMva)}
                    >
                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__d4Hf
                        )}
                        hideTrendTracker={true}
                        number={
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__cvPnj
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $queries.signupsByDateRange.data[0]
                                    .signup_count;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h2>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kiZjt
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__a4ZgP
                              )}
                              style={(() => {
                                try {
                                  return undefined;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              {"Sign-ups"}
                            </div>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__h4Yfk)}
                              displayHeight={"auto"}
                              displayMaxHeight={"24px"}
                              displayMaxWidth={"24px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/dashboard/images/image7.svg",
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__lefku
                        )}
                        hideTrendTracker={true}
                        number={
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__xrp45
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $queries.ordersByDateRange.data[0]
                                    .order_count;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h2>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ofTDm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lk8Pk
                              )}
                            >
                              {"Orders"}
                            </div>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__qqEyi)}
                              displayHeight={"auto"}
                              displayMaxHeight={"24px"}
                              displayMaxWidth={"24px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/dashboard/images/orderIcon.svg",
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__qvAmg
                        )}
                        hideTrendTracker={true}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lVoXm
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__sNqpA
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "$" +
                                      Intl.NumberFormat("en").format(
                                        $queries.totalRevByCustomDateRange
                                          .data[0].total_revenue
                                      )
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "NULL";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </h2>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___9ImYm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nNifZ
                              )}
                            >
                              {"Revenue"}
                            </div>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__qQno8)}
                              displayHeight={"auto"}
                              displayMaxHeight={"24px"}
                              displayMaxWidth={"24px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/dashboard/images/dollarIcon.svg",
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />
                    </Stack__>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__b5FAw)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__aLtUk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aMaGe
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__ukTa
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 500 }}
                            >
                              {"Revenue Trends"}
                            </span>
                          </React.Fragment>
                        </h2>
                        <AntdSelect
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          bordered={true}
                          className={classNames("__wab_instance", sty.select)}
                          defaultOpen={false}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          defaultValue={"month"}
                          onChange={generateStateOnChangeProp($state, [
                            "select",
                            "value"
                          ])}
                          options={(() => {
                            const __composite = [
                              { value: null, label: null, type: null },
                              { value: null, label: null, type: "option" }
                            ];
                            __composite["0"]["value"] = "month";
                            __composite["0"]["label"] = "month";
                            __composite["0"]["type"] = "option";
                            __composite["1"]["value"] = "quarterly";
                            __composite["1"]["label"] = "quarterly";
                            return __composite;
                          })()}
                          placeholder={"Select..."}
                          popupScopeClassName={sty["select__popup"]}
                          value={generateStateValueProp($state, [
                            "select",
                            "value"
                          ])}
                        />
                      </div>
                      <SimpleChart
                        className={classNames(
                          "__wab_instance",
                          sty.chart__eiQWt
                        )}
                        data={
                          $state.select.value === "month"
                            ? $queries.monthlyRevByDateRange.data
                            : $queries.quarterlyRevByDateRange.data
                        }
                        interactive={false}
                        title={``}
                        type={"bar"}
                      />
                    </Stack__>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__t0HNb)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ej2F9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ypYg3
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__pWaE3
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 500 }}
                            >
                              {"Revenue per country: within the last year"}
                            </span>
                          </React.Fragment>
                        </h2>
                      </div>
                      <SimpleChart
                        className={classNames(
                          "__wab_instance",
                          sty.chart__h34Yh
                        )}
                        data={$queries.topRevByCountryInDateRange.data}
                        interactive={false}
                        labelField={"country"}
                        title={"Revenue by country"}
                        type={"bar"}
                      />
                    </Stack__>
                  </section>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "h1", "start", "end", "select"],
  pageLayout: ["pageLayout", "h1", "start", "end", "select"],
  h1: ["h1"],
  start: ["start"],
  end: ["end"],
  select: ["select"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  h1: "h1";
  start: typeof AntdDatePicker;
  end: typeof AntdDatePicker;
  select: typeof AntdSelect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBusinessMetrics__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBusinessMetrics__VariantsArgs;
    args?: PlasmicBusinessMetrics__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBusinessMetrics__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBusinessMetrics__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBusinessMetrics__ArgProps,
          internalVariantPropNames: PlasmicBusinessMetrics__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBusinessMetrics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBusinessMetrics";
  } else {
    func.displayName = `PlasmicBusinessMetrics.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "p813zMkDftvWK6P1GMVxsb"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicBusinessMetrics = Object.assign(
  // Top-level PlasmicBusinessMetrics renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    h1: makeNodeComponent("h1"),
    start: makeNodeComponent("start"),
    end: makeNodeComponent("end"),
    select: makeNodeComponent("select"),

    // Metadata about props expected for PlasmicBusinessMetrics
    internalVariantProps: PlasmicBusinessMetrics__VariantProps,
    internalArgProps: PlasmicBusinessMetrics__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBusinessMetrics;
/* prettier-ignore-end */
